#!/bin/bash
#
# generic raw-uart solution based on pivccu: Alexander Reinert <alex@areinert.de>
#

description="Driver for HM-MOD-RPI-PCB with Homematic-IP for Archlinux ARM"
module_version="0.2"

# Default Parameter
file_rfd_conf="${LXC_ROOT_FS}/usr/local/etc/config/rfd.conf"
reboot=0 # Neustart notwendig

kernel_version=$(uname -r | sed -e 's/-.*//i')

_module_install()
{

    WORK_DIR=$(mktemp -d)
    # Aktuelle Kernel Version
    kernel_version=$(uname -r | sed -e 's/-.*//i')

    [ "x$(id -un)" == "xroot" ] || die "Sorry, this script must be run as root. Try sudo ...."

    info "Found kernel:   ${kernel_version} "

    # load actual config
    modprobe configs

    ################################
    #  OS/Board specific settings  #
    ################################

    if [ ! -f /boot/config.txt ] && [ $IS_FORCE -ne 1 ]
    then
        die "ERROR: File /boot/config.txt does not exist!"
    fi

    progress "Trying to disable bluetooth on Raspberry Pi 3 to use HM-MOD-RPI-PCB"

    if [ $(cat /boot/config.txt | grep pi3-miniuart-bt | wc -l ) -eq 0 ]
    then
        echo -e "\n# Allow the normal UART pins to work\ndtoverlay=pi3-miniuart-bt\nenable_uart=1\nforce_turbo=1" >> /boot/config.txt
        info "Modification /boot/config.txt done."
        reboot=$((reboot+1))
    fi

    # Disable serial
    progress "Trying to disable serial console"
    if [ ! -f $file_cmdline_txt ] && [ $IS_FORCE -ne 1 ]
    then
        die "ERROR: File $file_cmdline_txt does not exist!"
    fi

    if [ $(cat /boot/cmdline.txt|grep "console=serial0,115200"|wc -l) -gt 0 ];then
        sed -i /boot/cmdline.txt -e "s/console=ttyAMA0,[0-9]\+ //"
        sed -i /boot/cmdline.txt -e "s/console=serial0,[0-9]\+ //"
        reboot=$((reboot+1))
        info "Serial disabled successfully."
    else
        info "Serial already disabled"
    fi

    ###########################
    # Building kernel modules #
    ###########################

    info "Installing kernel modules"

    cd $WORK_DIR
    # Download generic uart sources
    cp -rf ${YAHM_DIR}/share/modules/share/piVCCU/* .
    cd kernel
    cp ${YAHM_DIR}/share/modules/share/kernel-modules/eq3_char_loop/*.c .

    # building
    progress "Building eq3 kernel modules"
    make
    if [ $? -ne 0 ]
    then
        die "ERROR: Problem while building eq3 module, exit"
    fi

    # copy binaries
    mkdir -p /lib/modules/$(uname -r)/kernel/drivers/pivccu
    cp *.ko /lib/modules/$(uname -r)/kernel/drivers/pivccu

    # regenerate modules list
    progress "Regenerating modules.dep and map files"
    depmod -a

    #################################################
    #   Overlay erstellen
    #################################################

    info "Installing/Setup overlay file"

    OVERLAY_FILE='pivccu-bcm2835.dtbo'

    TMP_DIR=`mktemp -d`
    cp -rf ${YAHM_DIR}/share/modules/share/piVCCU/dts $TMP_DIR

    if [ -z "${TMP_DIR}/dts/pivccu-bcm2835.dtbo" ]
    then
        die "ERROR: Overlay file pivccu-bcm2835.dtbo not found or hardware not supported"
    fi

    progress "Creating Overlay files"
    cd $TMP_DIR/dts
    dtc -@ -I dts -O dtb -o pivccu-bcm2835.dtbo pivccu-bcm2835.dts
   
    # check if exists
    if [ $(cat /boot/config.txt | grep pivccu-bcm2835 | wc -l ) -eq 0 ]
    then
        progress "Changing /boot/config.txt"
        echo "dtoverlay=pivccu-bcm2835.dtbo" >> /boot/config.txt
    fi

    cp -r $TMP_DIR/dts/pivccu-bcm2835.dtbo /boot/overlays/

    reboot=$((reboot+1))
    rm -rf $TMP_DIR

    #############
    #  Generic  #
    # ###########

    # multimacd needs rt scheduling to work
    info "Setup Kernel Scheduler"
    sysctl -w kernel.sched_rt_runtime_us=-1

    # Treiber beim Booten laden
    if [ $(cat /etc/modules-load.d/pivccu.conf | grep "^eq3_char_loop" | wc -l) -eq 0 ]
    then
        echo eq3_char_loop >> /etc/modules-load.d/pivccu.conf
        reboot=$((reboot+1))
    fi
    if [ $(cat /etc/modules-load.d/pivccu.conf | grep "^plat_eq3ccu2" | wc -l) -eq 0 ]
    then
        echo plat_eq3ccu2 >> /etc/modules-load.d/pivccu.conf
        reboot=$((reboot+1))
    fi

    progress "Preparing modification rfd.conf..."
    if [ ! -f $file_rfd_conf ]
    then
	    cp ${LXC_ROOT_FS}/etc/config_templates/rfd.conf $file_rfd_conf
    fi

    if [ $(cat $file_rfd_conf | grep "\[Interface 0\]"|wc -l) -eq 0 ];then
        info "[Interface 0] block in rfd.conf not found, insert it..."
        echo -e "\n[Interface 0]\nType = CCU2\nComPortFile = /dev/mmd_bidcos\n#AccessFile = /dev/null\n#ResetFile = /dev/ccu2-ic200" >> $file_rfd_conf
        info "Insert in rfd.conf done."
    else
        info "[Interface 0] block found in rfd.conf checking it..."
        # aendern
        sed  -e 's/#\[Interface 0\]/\[Interface 0\]/' -i $file_rfd_conf
        sed  -e 's/#Type = CCU2/Type = CCU2/' -i $file_rfd_conf
        sed  -e 's/#ComPortFile = \/dev\/mmd_bidcos/ComPortFile = \/dev\/mmd_bidcos/' -i $file_rfd_conf

        info "Modification rfd.conf done."
    fi

    progress "Changing multimacd files"
    # Init Skript
    sed -i ${LXC_ROOT_FS}/etc/init.d/S60multimacd -e "s/bcm2835-raw-uart/mxs_auart_raw.0/g"
    # Multimac Config
    if [ ! -f ${LXC_ROOT_FS}/usr/local/etc/config/multimacd.conf  ]
    then
        cp ${LXC_ROOT_FS}/etc/config_templates/multimacd.conf  ${LXC_ROOT_FS}/usr/local/etc/config/multimacd.conf
    fi
    sed -i ${LXC_ROOT_FS}/usr/local/etc/config/multimacd.conf -e "s/bcm2835-raw-uart/mxs_auart_raw.0/g"

    progress "Changing lxc config"
    sed -i $LXC_ROOT/config -e "s/lxc.cgroup.devices.allow = c 245:1 rwm/lxc.cgroup.devices.allow = c 241:* rwm/"
    sed -i $LXC_ROOT/config -e "s/lxc.cgroup.devices.allow = c 242:0 rwm/lxc.cgroup.devices.allow = c 242:* rwm/"
    sed -i $LXC_ROOT/config -e "s/lxc.cgroup.devices.allow = c 243:0 rwm/lxc.cgroup.devices.allow = c 243:* rwm/"
    sed -i $LXC_ROOT/config -e "s/lxc.cgroup.devices.allow = c 244:0 rwm/lxc.cgroup.devices.allow = c 244:* rwm/"
    sed -i $LXC_ROOT/config -e "s/lxc.cgroup.devices.allow = c 245:0 rwm/lxc.cgroup.devices.allow = c 245:* rwm/"
    sed -i $LXC_ROOT/config -e "s/lxc.cgroup.devices.allow = c 246:0 rwm/lxc.cgroup.devices.allow = c 246:* rwm/"

    if [ $(cat $LXC_ROOT/config | grep "^lxc.hook.pre-start" | wc -l) -eq 0 ]
    then
        echo "lxc.hook.pre-start=/var/lib/yahm/pre-start.sh" >> $LXC_ROOT/config
    fi

    if [ $(cat $LXC_ROOT/config | grep "^lxc.hook.start" | wc -l) -eq 0 ]
    then
        echo "lxc.hook.start=/bin/yahm-start.sh" >> $LXC_ROOT/config
    fi

    progress "Copy startup files"
    cp -rf  ${YAHM_DIR}/share/modules/share/pre-start.sh /var/lib/yahm/pre-start.sh
    chmod +x /var/lib/yahm/pre-start.sh
    cp -rf  ${YAHM_DIR}/share/modules/share/yahm-start.sh /var/lib/lxc/${LXCNAME}/rootfs/bin/yahm-start.sh
    chmod +x /var/lib/lxc/${LXCNAME}/rootfs/bin/yahm-start.sh

    # Reboot
    if [ $reboot -gt 0 ]
    then
#        echo "======================================"
#        echo "Rebooting in 60 seconds to apply settings (to chancel reboot type 'shutdown -c')..."
#        echo "======================================"
#        shutdown -r +1 "Rebooting to disable serial console"
        info "PIVCCU was installed successfully, please restart your system to apply changes"
    else
        info "PIVCCU was installed successfully, please restart YAHM to apply changes"
    fi
}
